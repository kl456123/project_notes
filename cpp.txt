


# concurrent

1. std::thread t(f);
t.join();// wait thread to exit
t.detach();// don't wait


note that the data accessed by the thread is valid until the thread has finished with it .



std::thread t(update_data_for_widget,w,data);
// it will copy data to the other thread and change data separate with that thread


class X
{
    public:
    void do_lengthy_work();
};
X my_x;
std::thread t(&X::do_lengthy_work,&my_x);

std::lock_guard<std::mutex> guard(some_mutex);
// it will unlock mutex automaticly


Any codde that has access to that pointer or reference
can now access (and potentially modify) the
protected dat without locking the mutex.

Don't pass pointers and references to protected data
outside the scope of the lock, whether by returning
them from a function, storing them in externally visible
memory, or passing them as arguments to user-supplied
functions.

BlockingQueue:
push()
pop()
peek()
size()

prefetch_full_;
prefetch_free_;
prefetch_; lock_guard(mutex); unique_guard(mutex);
condition_.wait(lock,condition);
condition_.notify_one();


# reader and writer problem

set count, increment when reader read sth and set -1 when writer write sth
another solution:
use shared_mutex to read at the same with other threads



## const after member function
this is const

## virtual deconstructor
call derived deconstructor


## 前置声明
class Bed;//to deal with 循环依赖(recurrent dependence)

Never redefine function's inherited default parameters value.

static bind of member data of class

static member variable should be initialized manually

## static_cast and dynamic_cast
static_cast dont check type first but dynamic_cast do
it can prevent from error when cast from parent class to child class
but parent class should be virtual class when using dynamic_cast
and the type_id should be pointer


## assert
static_assert and assert

## const and constexpr

## release and reset
release resource or not

# unamed namespace(rename it so that it is a unique id) and static(internal linkage)
